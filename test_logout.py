#!/usr/bin/env python3
'''
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ logout —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
'''
import asyncio
import httpx


async def test_logout():
    '''–¢–µ—Å—Ç logout —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞'''
    base_url = 'http://localhost:8000'
    
    async with httpx.AsyncClient() as client:
        print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ logout —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...')
        
        # –¢–µ—Å—Ç 1: Logout –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
        print('\n1. –¢–µ—Å—Ç logout –±–µ–∑ —Ç–æ–∫–µ–Ω–∞:')
        response = await client.post(f'{base_url}/auth/logout')
        print(f'   –°—Ç–∞—Ç—É—Å: {response.status_code}')
        if response.status_code == 401:
            print('   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 401 Unauthorized')
        else:
            print(f'   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {response.text}')
        
        # –¢–µ—Å—Ç 2: Logout —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
        print('\n2. –¢–µ—Å—Ç logout —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:')
        headers = {'Authorization': 'Bearer invalid_token'}
        response = await client.post(f'{base_url}/auth/logout', headers=headers)
        print(f'   –°—Ç–∞—Ç—É—Å: {response.status_code}')
        if response.status_code == 401:
            print('   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 401 Unauthorized')
        else:
            print(f'   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {response.text}')
        
        print('\nüìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:')
        print('   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --reload')
        print('   2. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ 2FA –ø—Ä–æ—Ü–µ—Å—Å')
        print('   3. –í—ã–ø–æ–ª–Ω–∏—Ç—å logout —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º')
        print('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º')


if __name__ == '__main__':
    asyncio.run(test_logout())
