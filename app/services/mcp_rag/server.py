import asyncio
import signal
import sys

import httpx
from typing import Dict, Any

from fastmcp import FastMCP

from app.core.config import settings
from app.logging import logging_config


mcp = FastMCP('sa_rag_agent')
mcp.settings.port = 8003
mcp.settings.host = '0.0.0.0'


_access_token: str | None = 'no token'
_access_token_lock = asyncio.Lock()


def _parse_retrieve_limit(value: str | None, default: int = 6) -> int:
    if value is None:
        return default
    try:
        limit = int(value)
        if limit <= 0:
            return default
        return limit
    except (TypeError, ValueError):
        return default


async def postprocess_retrieve_result(retrieve_result: Dict[str, Any]) -> str:
    result_str = 'Context:\n\n'
    results = retrieve_result.get('results', [])
    for idx, el in enumerate(results, start=1):
        content = el.get('content', '')
        metadata = el.get('metadata', {})
        result_str += (
            f'Document {idx}:\n'
            f'Content: {content}\n'
            f'Metadata: {metadata}\n\n'
        )
    return result_str


async def get_access_token() -> str:
    async with _access_token_lock:
        global _access_token
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                token_response = await client.post(
                    settings.auth_url,
                    data={
                        'grant_type': 'client_credentials',
                        'client_id': settings.key_id,
                        'client_secret': settings.key_secret,
                    },
                )
                token_response.raise_for_status()
                access_token = token_response.json().get('access_token')
                if not access_token:
                    raise ValueError(
                        '–û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token'
                        )
                _access_token = access_token
                return access_token
        except httpx.HTTPStatusError as e:
            raise RuntimeError(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access token. '
                f'–°—Ç–∞—Ç—É—Å: {e.response.status_code}; '
                f'–°–æ–æ–±—â–µ–Ω–∏–µ: {e.response.text}'
            )
        except httpx.TimeoutException:
            raise RuntimeError('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access token.')
        except httpx.RequestError as e:
            raise RuntimeError(f'–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}')
        except Exception as e:
            raise RuntimeError(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}')


@mcp.tool()
async def request_to_rag(query: str) -> str:
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–∞–µ—Ç
    —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ù–∞ –≤—ã—Ö–æ–¥–µ –≤—ã–¥–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Args:
        query: str - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    Raises:
        ValueError: –û—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        RuntimeError: –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞.
    """
    retrieve_limit = _parse_retrieve_limit(
        settings.retrieve_limit,
        default=6
        )
    global _access_token

    async def do_rag_request(access_token: str):
        async with httpx.AsyncClient(timeout=20.0) as client:
            payload = {
                'project_id': settings.evolution_project_id,
                'query': query,
                'retrieve_limit': retrieve_limit,
                'rag_version': settings.knowledge_base_version_id,
            }
            return await client.post(
                settings.retrieve_url_template,
                json=payload,
                headers={'Authorization': f'Bearer {access_token}'},
            )

    if _access_token is None:
        await get_access_token()

    try:
        response = await do_rag_request(_access_token)
        if response.status_code == 401:
            # –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω,
            # –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            await get_access_token()  # –æ–±–Ω–æ–≤–∏—Ç _access_token
            response = await do_rag_request(_access_token)
            if response.status_code == 401:
                # –í—Ç–æ—Ä–æ–π 401 –ø–æ–¥—Ä—è–¥ = —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.
                raise RuntimeError(
                    '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: '
                    '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π 401 –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.'
                )
        response.raise_for_status()
        retrieve_result = response.json()
    except httpx.HTTPStatusError as e:
        status = (
            e.response.status_code if e.response is not None else 'unknown'
            )
        message = (
            e.response.text if e.response is not None else 'no message'
            )
        raise RuntimeError(
            f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. '
            f'–°—Ç–∞—Ç—É—Å: {status}; –°–æ–æ–±—â–µ–Ω–∏–µ: {message}'
        )
    except httpx.TimeoutException:
        raise RuntimeError(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. '
            '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Managed RAG'
        )
    except httpx.RequestError as e:
        raise RuntimeError(
            f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. '
            f'–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Managed RAG: {e}'
        )
    except Exception as e:
        # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        raise RuntimeError(
            f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. '
            f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Managed RAG: {e}'
        )

    postprocessed_retrieve_result = (
        await postprocess_retrieve_result(retrieve_result)
        )
    return postprocessed_retrieve_result


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    mcp_logger = logging_config.get_endpoint_logger('mcp_rag_server')
    mcp_logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
    sys.exit(0)


if __name__ == '__main__':
    mcp_logger = logging_config.get_endpoint_logger('mcp_rag_server')
    mcp_logger.info('üåê –ó–∞–ø—É—Å–∫ MCP Evolution Managed RAG Server...')
    mcp_logger.info(
        f'üöÄ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://'
        f'{mcp.settings.host}:{mcp.settings.port}'
        )
    mcp_logger.info(
        f'üì° SSE endpoint: http://{mcp.settings.host}:{mcp.settings.port}/sse'
        )
    mcp_logger.info('‚úã –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
        mcp.run(transport='sse')
    except KeyboardInterrupt:
        mcp_logger.info('üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    except Exception as e:
        mcp_logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}')
        sys.exit(1)
